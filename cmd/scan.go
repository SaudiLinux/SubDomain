package cmd

import (
	"bufio"
	"fmt"
	"net"
	"os"
	"path/filepath"
	"strings"
	"time"

	"github.com/SayerLinux/sub/pkg/scanner"
	"github.com/fatih/color"
	"github.com/spf13/cobra"
)

// NewScanCmd creates the scan command
func NewScanCmd() *cobra.Command {
	var (
		target     string
		outputDir  string
		checkPorts bool
		extractFiles bool
	)

	scanCmd := &cobra.Command{
		Use:   "scan",
		Short: "Scan subdomains for services and extract files",
		Long:  `Scan discovered subdomains for running services and attempt to extract sensitive files.`,
		Run: func(cmd *cobra.Command, args []string) {
			if target == "" {
				fmt.Println("\033[1;31m[!] Error: Target domain is required\033[0m")
				cmd.Help()
				os.Exit(1)
			}

			// Create output directory if it doesn't exist
			if outputDir == "" {
				outputDir = "./output"
			}

			err := os.MkdirAll(outputDir, 0755)
			if err != nil {
				fmt.Printf("\033[1;31m[!] Error: Failed to create output directory: %v\033[0m\n", err)
				os.Exit(1)
			}

			// Read subdomains from file if target is a file
			var subdomains []string
			if strings.HasSuffix(target, ".txt") {
				file, err := os.Open(target)
				if err != nil {
					fmt.Printf("\033[1;31m[!] Error: Failed to open file: %v\033[0m\n", err)
					os.Exit(1)
				}
				defer file.Close()

				scanner := bufio.NewScanner(file)
				for scanner.Scan() {
					subdomain := strings.TrimSpace(scanner.Text())
					if subdomain != "" && !strings.HasPrefix(subdomain, "#") {
						subdomains = append(subdomains, subdomain)
					}
				}

				if err := scanner.Err(); err != nil {
					fmt.Printf("\033[1;31m[!] Error: Failed to read file: %v\033[0m\n", err)
					os.Exit(1)
				}
			} else {
				// Single subdomain
				subdomains = append(subdomains, target)
			}

			fmt.Printf("\033[1;34m[*] Scanning %d subdomains...\033[0m\n", len(subdomains))

			// Process each subdomain
			for _, subdomain := range subdomains {
				fmt.Printf("\033[1;34m[*] Processing: %s\033[0m\n", subdomain)

				// Resolve IP
				ips, err := net.LookupIP(subdomain)
				if err != nil {
					fmt.Printf("\033[1;31m[!] Could not resolve %s: %v\033[0m\n", subdomain, err)
					continue
				}

				ip := ips[0].String()
				fmt.Printf("\033[1;32m[+] Resolved %s to %s\033[0m\n", subdomain, ip)

				// Check ports if enabled
				if checkPorts {
					fmt.Printf("\033[1;34m[*] Checking common ports on %s...\033[0m\n", subdomain)
					services := scanner.CheckCommonPorts(subdomain, ip)

					if len(services) > 0 {
						fmt.Printf("\033[1;32m[+] Found %d open ports on %s\033[0m\n", len(services), subdomain)

						// Save service information
						serviceFile := filepath.Join(outputDir, fmt.Sprintf("%s_services.txt", subdomain))
						file, err := os.Create(serviceFile)
						if err == nil {
							defer file.Close()
							writer := bufio.NewWriter(file)

							writer.WriteString(fmt.Sprintf("# Service Scan Results for %s\n", subdomain))
							writer.WriteString(fmt.Sprintf("# Generated by Sub Tool - By SayerLinux (SaudiSayer@gmail.com)\n"))
							writer.WriteString(fmt.Sprintf("# Date: %s\n\n", time.Now().Format(time.RFC1123)))

							for _, service := range services {
								writer.WriteString(fmt.Sprintf("Port: %d\nService: %s\n", service.Port, service.Service))
								if service.StatusCode > 0 {
									writer.WriteString(fmt.Sprintf("Status Code: %d\n", service.StatusCode))
								}
								if service.Server != "" {
									writer.WriteString(fmt.Sprintf("Server: %s\n", service.Server))
								}
								if service.Title != "" {
									writer.WriteString(fmt.Sprintf("Title: %s\n", service.Title))
								}
								writer.WriteString("\n")
							}

							writer.Flush()
							fmt.Printf("\033[1;32m[+] Service information saved to %s\033[0m\n", serviceFile)
						}

						// Display service information
						for _, service := range services {
							fmt.Printf("\033[1;32m[+] %s:%d - %s\033[0m\n", subdomain, service.Port, service.Service)
							if service.StatusCode > 0 {
								fmt.Printf("    Status Code: %d\n", service.StatusCode)
							}
							if service.Server != "" {
								fmt.Printf("    Server: %s\n", service.Server)
							}
							if service.Title != "" {
								fmt.Printf("    Title: %s\n", service.Title)
							}
						}
					} else {
						fmt.Printf("\033[1;33m[!] No open ports found on %s\033[0m\n", subdomain)
					}
				}

				// Extract files if enabled
				if extractFiles {
					fmt.Printf("\033[1;34m[*] Attempting to extract files from %s...\033[0m\n", subdomain)
					subdomainDir := filepath.Join(outputDir, subdomain)
					err := scanner.ExtractFiles(subdomain, outputDir)
					if err != nil {
						fmt.Printf("\033[1;31m[!] Error extracting files: %v\033[0m\n", err)
					} else {
						fmt.Printf("\033[1;32m[+] Files extracted to %s\033[0m\n", subdomainDir)
					}
				}
			}

			fmt.Println("\n\033[1;32m[+] Scan completed!\033[0m")
		},
	}

	// Add flags
	scanCmd.Flags().StringVarP(&target, "target", "t", "", "Target domain or file containing list of domains")
	scanCmd.Flags().StringVarP(&outputDir, "output-dir", "o", "", "Output directory for scan results")
	scanCmd.Flags().BoolVarP(&checkPorts, "check-ports", "p", true, "Check for open ports and services")
	scanCmd.Flags().BoolVarP(&extractFiles, "extract-files", "e", true, "Attempt to extract sensitive files")

	return scanCmd
}